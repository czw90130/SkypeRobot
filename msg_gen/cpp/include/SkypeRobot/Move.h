/* Auto-generated by genmsg_cpp for file /home/user/ros_workspace/sandbox/SkypeRobot/msg/Move.msg */
#ifndef SKYPEROBOT_MESSAGE_MOVE_H
#define SKYPEROBOT_MESSAGE_MOVE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace SkypeRobot
{
template <class ContainerAllocator>
struct Move_ {
  typedef Move_<ContainerAllocator> Type;

  Move_()
  : LeftWhell(0)
  , RightWhell(0)
  , MoveState(0)
  , ArmState(0)
  {
  }

  Move_(const ContainerAllocator& _alloc)
  : LeftWhell(0)
  , RightWhell(0)
  , MoveState(0)
  , ArmState(0)
  {
  }

  typedef int16_t _LeftWhell_type;
  int16_t LeftWhell;

  typedef int16_t _RightWhell_type;
  int16_t RightWhell;

  typedef uint16_t _MoveState_type;
  uint16_t MoveState;

  typedef uint16_t _ArmState_type;
  uint16_t ArmState;


  typedef boost::shared_ptr< ::SkypeRobot::Move_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SkypeRobot::Move_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Move
typedef  ::SkypeRobot::Move_<std::allocator<void> > Move;

typedef boost::shared_ptr< ::SkypeRobot::Move> MovePtr;
typedef boost::shared_ptr< ::SkypeRobot::Move const> MoveConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::SkypeRobot::Move_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::SkypeRobot::Move_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace SkypeRobot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::SkypeRobot::Move_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::SkypeRobot::Move_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::SkypeRobot::Move_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6915f32f700bc1942ecaa4b776cd432c";
  }

  static const char* value(const  ::SkypeRobot::Move_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6915f32f700bc194ULL;
  static const uint64_t static_value2 = 0x2ecaa4b776cd432cULL;
};

template<class ContainerAllocator>
struct DataType< ::SkypeRobot::Move_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SkypeRobot/Move";
  }

  static const char* value(const  ::SkypeRobot::Move_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::SkypeRobot::Move_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16    LeftWhell\n\
int16    RightWhell\n\
uint16	 MoveState\n\
uint16   ArmState\n\
\n\
";
  }

  static const char* value(const  ::SkypeRobot::Move_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::SkypeRobot::Move_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::SkypeRobot::Move_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.LeftWhell);
    stream.next(m.RightWhell);
    stream.next(m.MoveState);
    stream.next(m.ArmState);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Move_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::SkypeRobot::Move_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::SkypeRobot::Move_<ContainerAllocator> & v) 
  {
    s << indent << "LeftWhell: ";
    Printer<int16_t>::stream(s, indent + "  ", v.LeftWhell);
    s << indent << "RightWhell: ";
    Printer<int16_t>::stream(s, indent + "  ", v.RightWhell);
    s << indent << "MoveState: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.MoveState);
    s << indent << "ArmState: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ArmState);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SKYPEROBOT_MESSAGE_MOVE_H

