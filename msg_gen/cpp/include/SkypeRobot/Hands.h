/* Auto-generated by genmsg_cpp for file /home/user/ros_workspace/sandbox/SkypeRobot/msg/Hands.msg */
#ifndef SKYPEROBOT_MESSAGE_HANDS_H
#define SKYPEROBOT_MESSAGE_HANDS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace SkypeRobot
{
template <class ContainerAllocator>
struct Hands_ {
  typedef Hands_<ContainerAllocator> Type;

  Hands_()
  : HandLeft(0)
  , HandRight(0)
  {
  }

  Hands_(const ContainerAllocator& _alloc)
  : HandLeft(0)
  , HandRight(0)
  {
  }

  typedef uint16_t _HandLeft_type;
  uint16_t HandLeft;

  typedef uint16_t _HandRight_type;
  uint16_t HandRight;


  typedef boost::shared_ptr< ::SkypeRobot::Hands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SkypeRobot::Hands_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Hands
typedef  ::SkypeRobot::Hands_<std::allocator<void> > Hands;

typedef boost::shared_ptr< ::SkypeRobot::Hands> HandsPtr;
typedef boost::shared_ptr< ::SkypeRobot::Hands const> HandsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::SkypeRobot::Hands_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::SkypeRobot::Hands_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace SkypeRobot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::SkypeRobot::Hands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::SkypeRobot::Hands_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::SkypeRobot::Hands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5ab3baf2ba0e67706b94d42614b454f4";
  }

  static const char* value(const  ::SkypeRobot::Hands_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5ab3baf2ba0e6770ULL;
  static const uint64_t static_value2 = 0x6b94d42614b454f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::SkypeRobot::Hands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SkypeRobot/Hands";
  }

  static const char* value(const  ::SkypeRobot::Hands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::SkypeRobot::Hands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16    HandLeft\n\
uint16    HandRight\n\
\n\
";
  }

  static const char* value(const  ::SkypeRobot::Hands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::SkypeRobot::Hands_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::SkypeRobot::Hands_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.HandLeft);
    stream.next(m.HandRight);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Hands_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::SkypeRobot::Hands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::SkypeRobot::Hands_<ContainerAllocator> & v) 
  {
    s << indent << "HandLeft: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.HandLeft);
    s << indent << "HandRight: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.HandRight);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SKYPEROBOT_MESSAGE_HANDS_H

